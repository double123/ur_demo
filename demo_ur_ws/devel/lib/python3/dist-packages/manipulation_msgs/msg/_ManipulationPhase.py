# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from manipulation_msgs/ManipulationPhase.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ManipulationPhase(genpy.Message):
  _md5sum = "2c824c847a35d8fd9277d324a3723378"
  _type = "manipulation_msgs/ManipulationPhase"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 CHECKING_FEASIBILITY = 0
int32 MOVING_TO_PREGRASP = 1
int32 MOVING_TO_GRASP = 2
int32 CLOSING = 3 
int32 ADJUSTING_GRASP = 4
int32 LIFTING = 5
int32 MOVING_WITH_OBJECT = 6
int32 MOVING_TO_PLACE = 7
int32 PLACING = 8
int32 OPENING = 9
int32 RETREATING = 10
int32 MOVING_WITHOUT_OBJECT = 11
int32 SHAKING = 12
int32 SUCCEEDED = 13
int32 FAILED = 14
int32 ABORTED = 15
int32 HOLDING_OBJECT = 16

int32 phase"""
  # Pseudo-constants
  CHECKING_FEASIBILITY = 0
  MOVING_TO_PREGRASP = 1
  MOVING_TO_GRASP = 2
  CLOSING = 3
  ADJUSTING_GRASP = 4
  LIFTING = 5
  MOVING_WITH_OBJECT = 6
  MOVING_TO_PLACE = 7
  PLACING = 8
  OPENING = 9
  RETREATING = 10
  MOVING_WITHOUT_OBJECT = 11
  SHAKING = 12
  SUCCEEDED = 13
  FAILED = 14
  ABORTED = 15
  HOLDING_OBJECT = 16

  __slots__ = ['phase']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       phase

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ManipulationPhase, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.phase is None:
        self.phase = 0
    else:
      self.phase = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.phase
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.phase,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.phase
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.phase,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
