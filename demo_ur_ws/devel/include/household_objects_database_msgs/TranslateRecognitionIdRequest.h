// Generated by gencpp from file household_objects_database_msgs/TranslateRecognitionIdRequest.msg
// DO NOT EDIT!


#ifndef HOUSEHOLD_OBJECTS_DATABASE_MSGS_MESSAGE_TRANSLATERECOGNITIONIDREQUEST_H
#define HOUSEHOLD_OBJECTS_DATABASE_MSGS_MESSAGE_TRANSLATERECOGNITIONIDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace household_objects_database_msgs
{
template <class ContainerAllocator>
struct TranslateRecognitionIdRequest_
{
  typedef TranslateRecognitionIdRequest_<ContainerAllocator> Type;

  TranslateRecognitionIdRequest_()
    : recognition_id()  {
    }
  TranslateRecognitionIdRequest_(const ContainerAllocator& _alloc)
    : recognition_id(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _recognition_id_type;
  _recognition_id_type recognition_id;





  typedef boost::shared_ptr< ::household_objects_database_msgs::TranslateRecognitionIdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::household_objects_database_msgs::TranslateRecognitionIdRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TranslateRecognitionIdRequest_

typedef ::household_objects_database_msgs::TranslateRecognitionIdRequest_<std::allocator<void> > TranslateRecognitionIdRequest;

typedef boost::shared_ptr< ::household_objects_database_msgs::TranslateRecognitionIdRequest > TranslateRecognitionIdRequestPtr;
typedef boost::shared_ptr< ::household_objects_database_msgs::TranslateRecognitionIdRequest const> TranslateRecognitionIdRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::household_objects_database_msgs::TranslateRecognitionIdRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::household_objects_database_msgs::TranslateRecognitionIdRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::household_objects_database_msgs::TranslateRecognitionIdRequest_<ContainerAllocator1> & lhs, const ::household_objects_database_msgs::TranslateRecognitionIdRequest_<ContainerAllocator2> & rhs)
{
  return lhs.recognition_id == rhs.recognition_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::household_objects_database_msgs::TranslateRecognitionIdRequest_<ContainerAllocator1> & lhs, const ::household_objects_database_msgs::TranslateRecognitionIdRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace household_objects_database_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::household_objects_database_msgs::TranslateRecognitionIdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::household_objects_database_msgs::TranslateRecognitionIdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::household_objects_database_msgs::TranslateRecognitionIdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::household_objects_database_msgs::TranslateRecognitionIdRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::household_objects_database_msgs::TranslateRecognitionIdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::household_objects_database_msgs::TranslateRecognitionIdRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::household_objects_database_msgs::TranslateRecognitionIdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4d95610f63ed69a670a8f8aaa3c6aa36";
  }

  static const char* value(const ::household_objects_database_msgs::TranslateRecognitionIdRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4d95610f63ed69a6ULL;
  static const uint64_t static_value2 = 0x70a8f8aaa3c6aa36ULL;
};

template<class ContainerAllocator>
struct DataType< ::household_objects_database_msgs::TranslateRecognitionIdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "household_objects_database_msgs/TranslateRecognitionIdRequest";
  }

  static const char* value(const ::household_objects_database_msgs::TranslateRecognitionIdRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::household_objects_database_msgs::TranslateRecognitionIdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string recognition_id\n"
;
  }

  static const char* value(const ::household_objects_database_msgs::TranslateRecognitionIdRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::household_objects_database_msgs::TranslateRecognitionIdRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.recognition_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TranslateRecognitionIdRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::household_objects_database_msgs::TranslateRecognitionIdRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::household_objects_database_msgs::TranslateRecognitionIdRequest_<ContainerAllocator>& v)
  {
    s << indent << "recognition_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.recognition_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HOUSEHOLD_OBJECTS_DATABASE_MSGS_MESSAGE_TRANSLATERECOGNITIONIDREQUEST_H
