// Generated by gencpp from file household_objects_database_msgs/GetModelScansResponse.msg
// DO NOT EDIT!


#ifndef HOUSEHOLD_OBJECTS_DATABASE_MSGS_MESSAGE_GETMODELSCANSRESPONSE_H
#define HOUSEHOLD_OBJECTS_DATABASE_MSGS_MESSAGE_GETMODELSCANSRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <household_objects_database_msgs/DatabaseReturnCode.h>
#include <household_objects_database_msgs/DatabaseScan.h>

namespace household_objects_database_msgs
{
template <class ContainerAllocator>
struct GetModelScansResponse_
{
  typedef GetModelScansResponse_<ContainerAllocator> Type;

  GetModelScansResponse_()
    : return_code()
    , matching_scans()  {
    }
  GetModelScansResponse_(const ContainerAllocator& _alloc)
    : return_code(_alloc)
    , matching_scans(_alloc)  {
  (void)_alloc;
    }



   typedef  ::household_objects_database_msgs::DatabaseReturnCode_<ContainerAllocator>  _return_code_type;
  _return_code_type return_code;

   typedef std::vector< ::household_objects_database_msgs::DatabaseScan_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::household_objects_database_msgs::DatabaseScan_<ContainerAllocator> >> _matching_scans_type;
  _matching_scans_type matching_scans;





  typedef boost::shared_ptr< ::household_objects_database_msgs::GetModelScansResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::household_objects_database_msgs::GetModelScansResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetModelScansResponse_

typedef ::household_objects_database_msgs::GetModelScansResponse_<std::allocator<void> > GetModelScansResponse;

typedef boost::shared_ptr< ::household_objects_database_msgs::GetModelScansResponse > GetModelScansResponsePtr;
typedef boost::shared_ptr< ::household_objects_database_msgs::GetModelScansResponse const> GetModelScansResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::household_objects_database_msgs::GetModelScansResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::household_objects_database_msgs::GetModelScansResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::household_objects_database_msgs::GetModelScansResponse_<ContainerAllocator1> & lhs, const ::household_objects_database_msgs::GetModelScansResponse_<ContainerAllocator2> & rhs)
{
  return lhs.return_code == rhs.return_code &&
    lhs.matching_scans == rhs.matching_scans;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::household_objects_database_msgs::GetModelScansResponse_<ContainerAllocator1> & lhs, const ::household_objects_database_msgs::GetModelScansResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace household_objects_database_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::household_objects_database_msgs::GetModelScansResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::household_objects_database_msgs::GetModelScansResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::household_objects_database_msgs::GetModelScansResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::household_objects_database_msgs::GetModelScansResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::household_objects_database_msgs::GetModelScansResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::household_objects_database_msgs::GetModelScansResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::household_objects_database_msgs::GetModelScansResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8d1bb6e95c26a5d891987d9d9195e958";
  }

  static const char* value(const ::household_objects_database_msgs::GetModelScansResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8d1bb6e95c26a5d8ULL;
  static const uint64_t static_value2 = 0x91987d9d9195e958ULL;
};

template<class ContainerAllocator>
struct DataType< ::household_objects_database_msgs::GetModelScansResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "household_objects_database_msgs/GetModelScansResponse";
  }

  static const char* value(const ::household_objects_database_msgs::GetModelScansResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::household_objects_database_msgs::GetModelScansResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"# the outcome of the query\n"
"DatabaseReturnCode return_code\n"
"\n"
"# the returned scans\n"
"DatabaseScan[] matching_scans\n"
"\n"
"================================================================================\n"
"MSG: household_objects_database_msgs/DatabaseReturnCode\n"
"# return codes for database-related services\n"
"\n"
"int32 UNKNOWN_ERROR = 1\n"
"int32 DATABASE_NOT_CONNECTED = 2\n"
"int32 DATABASE_QUERY_ERROR = 3\n"
"int32 SUCCESS = -1\n"
"\n"
"int32 code\n"
"================================================================================\n"
"MSG: household_objects_database_msgs/DatabaseScan\n"
"# Contains the location of a stored point cloud scan of an object, \n"
"# as well as additional metadata about that scan \n"
"\n"
"# the database id of the model\n"
"int32 model_id\n"
"\n"
"# the location of the bag file storing the scan\n"
"string bagfile_location\n"
"\n"
"# the source of the scan (e.g. simulation)\n"
"string scan_source\n"
"\n"
"# the ground truth pose of the object that was scanned\n"
"geometry_msgs/PoseStamped pose\n"
"\n"
"# the topic that the points in the bag are published on\n"
"string cloud_topic\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::household_objects_database_msgs::GetModelScansResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::household_objects_database_msgs::GetModelScansResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.return_code);
      stream.next(m.matching_scans);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetModelScansResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::household_objects_database_msgs::GetModelScansResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::household_objects_database_msgs::GetModelScansResponse_<ContainerAllocator>& v)
  {
    s << indent << "return_code: ";
    s << std::endl;
    Printer< ::household_objects_database_msgs::DatabaseReturnCode_<ContainerAllocator> >::stream(s, indent + "  ", v.return_code);
    s << indent << "matching_scans[]" << std::endl;
    for (size_t i = 0; i < v.matching_scans.size(); ++i)
    {
      s << indent << "  matching_scans[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::household_objects_database_msgs::DatabaseScan_<ContainerAllocator> >::stream(s, indent + "    ", v.matching_scans[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // HOUSEHOLD_OBJECTS_DATABASE_MSGS_MESSAGE_GETMODELSCANSRESPONSE_H
