#! /usr/bin/env python
import sys
import rospy
import moveit_commander

from moveit_commander import MoveGroupCommander
from geometry_msgs.msg import Pose
from copy import deepcopy

def callback(pose):
    object_position_info = pose.position
    object_orientation_info = pose.orientation
    print(object_position_info)

    # 初始化move_group的API
    moveit_commander.roscpp_initialize(sys.argv)
    # 是否需要使用笛卡尔空间的运动规划，获取参数，如果没有设置，则默认为True，即走直线
    cartesian = rospy.get_param('~cartesian', True)
                        
    # 初始化需要使用move group控制的机械臂中的arm group
    arm = MoveGroupCommander('arm')
    ur5_gripper = MoveGroupCommander('gripper')

    # 当运动规划失败后，允许重新规划
    arm.allow_replanning(True)

    # 设置目标位置所使用的参考坐标系
    arm.set_pose_reference_frame('base_link')

    # 设置位置(单位：米)和姿态（单位：弧度）的允许误差
    arm.set_goal_position_tolerance(0.01)
    arm.set_goal_orientation_tolerance(0.01)

    # 设置允许的最大速度和加速度
    arm.set_max_acceleration_scaling_factor(0.3)
    arm.set_max_velocity_scaling_factor(0.3)

    # 获取终端link的名称
    end_effector_link = arm.get_end_effector_link()   

    # 控制机械臂先回到初始化位置
    arm.set_named_target('home')
    arm.go()
    ur5_gripper.set_named_target('open')
    ur5_gripper.go()

    #get the end effort information
    start_pose = arm.get_current_pose(end_effector_link).pose
    print("The first waypoint:")

    # 初始化路点列表
    waypoints = []   

    # 如果为True,将初始位姿加入路点列表
    # if cartesian:      
        # waypoints.append(start_pose)

    # 复制start_pose,移动到object上方
    wpose = deepcopy(start_pose)
    wpose.position.z = object_position_info.z+0.25
    wpose.position.x = object_position_info.x
    wpose.position.y = object_position_info.y
    print("The second waypoint:")
    print(wpose) 
    print("cartesian:",cartesian)
    if cartesian: 
        waypoints.append(deepcopy(wpose))
        print(" second append ok")
    else:        #否则就走曲线，机械臂自己规划奇葩路线
        arm.set_pose_target(wpose)  #自由曲线
        arm.go()
        rospy.sleep(1)

    # 向下移动
    wpose.position.z -= 0.08
    wpose.position.y -= 0.01
    wpose.position.x -= 0.01
    if cartesian:
        waypoints.append(deepcopy(wpose))
    else:
        arm.set_pose_target(wpose)
        arm.go()
        # rospy.sleep(1)

    if cartesian:
        fraction = 0.0   #路径规划覆盖率
        maxtries = 100   #最大尝试规划次数
        attempts = 0     #已经尝试规划次数

        # 设置机器臂当前的状态作为运动初始状态
        arm.set_start_state_to_current_state()
        # 尝试规划一条笛卡尔空间下的路径，依次通过所有路点
        while fraction < 1.0 and attempts < maxtries:
            (plan, fraction) =  arm.compute_cartesian_path (
                                        waypoints,   # waypoint poses，路点列表，这里是 个点
                                        0.01,        # eef_step，终端步进值，每隔0.01m计算一次逆解判断能否可达       
                                        0.0,         # jump_threshold，跳跃阈值，设置为0代表不允许跳跃
                                        True)        # avoid_collisions，避障规划     
            # 尝试次数累加
            attempts += 1
                
            # 打印运动规划进程
            if attempts % 10 == 0:
                rospy.loginfo("Still trying after " + str(attempts) + " attempts...")
                         
        # 如果路径规划成功（覆盖率100%）,则开始控制机械臂运动   
        if fraction == 1.0:
            rospy.loginfo("Path computed successfully. Moving the arm.")
            arm.execute(plan)
            rospy.sleep(2)
            rospy.loginfo("Path execution complete.")
        # 如果路径规划失败，则打印失败信息    
        else:
            rospy.loginfo("Path planning failed with only " + str(fraction) + " success after " + str(maxtries) + " attempts.")  

    #抓取 
    rospy.sleep(0.05)
    ur5_gripper.set_named_target("grasp")
    plan = ur5_gripper.go(wait=True)
    rospy.sleep(0.05)

    arm.set_named_target('home')
    arm.go(wait=True)
    rospy.sleep(3)
        # 向下移动
    wpose.position.z -= 0.16
    arm.go(wait=True)

    ur5_gripper.set_named_target('open')
    ur5_gripper.go(wait=True)

    arm.set_named_target('home')
    arm.go(wait=True)

    moveit_commander.roscpp_shutdown()
    moveit_commander.os._exit(0) 

def object_position_sub():
    rospy.Subscriber("/objection_position_pose",Pose,callback,queue_size=10)
if __name__ == "__main__":
    rospy.init_node('object_position_sub_And_grasp_node',anonymous=True)
    object_position_sub()
    rate = rospy.Rate(10.0)
    while not rospy.is_shutdown():
        try:
            print("11")
            rospy.spin()
        except KeyboardInterrupt:
            print("Shutting down")
                
        rate.sleep()