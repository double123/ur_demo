# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from manipulation_msgs/GraspResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GraspResult(genpy.Message):
  _md5sum = "c8a909da895cdddc0630aafd59848191"
  _type = "manipulation_msgs/GraspResult"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 SUCCESS = 1
int32 GRASP_OUT_OF_REACH = 2
int32 GRASP_IN_COLLISION = 3
int32 GRASP_UNFEASIBLE = 4
int32 PREGRASP_OUT_OF_REACH = 5
int32 PREGRASP_IN_COLLISION = 6
int32 PREGRASP_UNFEASIBLE = 7
int32 LIFT_OUT_OF_REACH = 8
int32 LIFT_IN_COLLISION = 9
int32 LIFT_UNFEASIBLE = 10
int32 MOVE_ARM_FAILED = 11
int32 GRASP_FAILED = 12
int32 LIFT_FAILED = 13
int32 RETREAT_FAILED = 14
int32 result_code

# whether the state of the world was disturbed by this attempt. generally, this flag
# shows if another task can be attempted, or a new sensed world model is recommeded
# before proceeding
bool continuation_possible
"""
  # Pseudo-constants
  SUCCESS = 1
  GRASP_OUT_OF_REACH = 2
  GRASP_IN_COLLISION = 3
  GRASP_UNFEASIBLE = 4
  PREGRASP_OUT_OF_REACH = 5
  PREGRASP_IN_COLLISION = 6
  PREGRASP_UNFEASIBLE = 7
  LIFT_OUT_OF_REACH = 8
  LIFT_IN_COLLISION = 9
  LIFT_UNFEASIBLE = 10
  MOVE_ARM_FAILED = 11
  GRASP_FAILED = 12
  LIFT_FAILED = 13
  RETREAT_FAILED = 14

  __slots__ = ['result_code','continuation_possible']
  _slot_types = ['int32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result_code,continuation_possible

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GraspResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.result_code is None:
        self.result_code = 0
      if self.continuation_possible is None:
        self.continuation_possible = False
    else:
      self.result_code = 0
      self.continuation_possible = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_iB().pack(_x.result_code, _x.continuation_possible))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.result_code, _x.continuation_possible,) = _get_struct_iB().unpack(str[start:end])
      self.continuation_possible = bool(self.continuation_possible)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_iB().pack(_x.result_code, _x.continuation_possible))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.result_code, _x.continuation_possible,) = _get_struct_iB().unpack(str[start:end])
      self.continuation_possible = bool(self.continuation_possible)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_iB = None
def _get_struct_iB():
    global _struct_iB
    if _struct_iB is None:
        _struct_iB = struct.Struct("<iB")
    return _struct_iB
